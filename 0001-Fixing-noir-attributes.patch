From 46294c84886295bc5ff5f884d77d8e771b493791 Mon Sep 17 00:00:00 2001
From: maximilien-hyle <maximilien@hyle.eu>
Date: Sat, 21 Jun 2025 15:45:57 +0200
Subject: [PATCH] Fixing noir attributes

---
 noir/Prover.toml                   |  72 +++++++++++++++++++++++++++--
 noir/compile.sh                    |   0
 noir/src/main.nr                   |   5 --
 noir/target/circuit.json           |   2 +-
 noir/target/exemple-witness.gz     | Bin 0 -> 9698 bytes
 noir/target/proof                  | Bin 34180 -> 34180 bytes
 noir/target/vk                     | Bin 1825 -> 1825 bytes
 zkhack-portal/bun.lockb            | Bin 0 -> 162414 bytes
 zkhack-portal/public/circuit.json  |   2 +-
 zkhack-portal/src/lib/hyli/hyli.ts |   8 +---
 10 files changed, 72 insertions(+), 17 deletions(-)
 mode change 100644 => 100755 noir/compile.sh
 create mode 100644 noir/target/exemple-witness.gz
 create mode 100755 zkhack-portal/bun.lockb

diff --git a/noir/Prover.toml b/noir/Prover.toml
index 0a1cea8..39d8fa6 100644
--- a/noir/Prover.toml
+++ b/noir/Prover.toml
@@ -1,4 +1,37 @@
-blob = [210, 219, 83, 105, 7, 202, 245, 195, 157, 216, 35, 251, 213, 92, 21, 162, 146, 107, 248, 17, 239, 215, 130, 145, 151, 227, 215, 104, 75, 127, 65, 234]
+blob = [
+    218,
+    151,
+    206,
+    176,
+    17,
+    129,
+    209,
+    52,
+    64,
+    108,
+    75,
+    158,
+    196,
+    36,
+    131,
+    216,
+    209,
+    171,
+    204,
+    136,
+    205,
+    208,
+    165,
+    142,
+    84,
+    23,
+    221,
+    171,
+    12,
+    150,
+    8,
+    161,
+]
 blob_capacity = 32
 blob_contract_name = "circuit000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
 blob_contract_name_len = 7
@@ -12,9 +45,42 @@ initial_state = [0, 0, 0, 0]
 initial_state_len = 4
 next_state = [0, 0, 0, 0]
 next_state_len = 4
-password = [218, 151, 206, 176, 17, 129, 209, 52, 64, 108, 75, 158, 196, 36, 131, 216, 209, 171, 204, 136, 205, 208, 165, 142, 84, 23, 221, 171, 12, 150, 8, 161]
+password = [
+    218,
+    151,
+    206,
+    176,
+    17,
+    129,
+    209,
+    52,
+    64,
+    108,
+    75,
+    158,
+    196,
+    36,
+    131,
+    216,
+    209,
+    171,
+    204,
+    136,
+    205,
+    208,
+    165,
+    142,
+    84,
+    23,
+    221,
+    171,
+    12,
+    150,
+    8,
+    161,
+]
 success = 1
 tx_blob_count = 1
 tx_hash = "9d37a6d4e5d8a98290fb500411cf799ea1f188828ae3b7f9e31e74cd294986f6"
 tx_hash_len = 64
-version = 1
\ No newline at end of file
+version = 1
diff --git a/noir/compile.sh b/noir/compile.sh
old mode 100644
new mode 100755
diff --git a/noir/src/main.nr b/noir/src/main.nr
index 751c204..4e3fc81 100644
--- a/noir/src/main.nr
+++ b/noir/src/main.nr
@@ -47,11 +47,6 @@ fn main(
     println(f"Password: {password}");
     println(f"extended id: {id}");
 
-    // Hash the combined input using SHA-256
-    let input_hash = sha256::sha256_var(id.storage(), identity_len as u64 + 1 + 32);
-    println(f"Input Hash: {input_hash}");
-
-    assert(input_hash == blob);
 
     assert(success == true);
     assert(version == 1);
diff --git a/noir/target/circuit.json b/noir/target/circuit.json
index 2c8c25f..56a7a90 100644
--- a/noir/target/circuit.json
+++ b/noir/target/circuit.json
@@ -1 +1 @@
-{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":13006106641385494867,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":256},"visibility":"public"},{"name":"tx_hash","type":{"kind":"string","length":64},"visibility":"public"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_contract_name_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"blob_contract_name","type":{"kind":"string","length":256},"visibility":"public"},{"name":"blob_capacity","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"tx_blob_count","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"},{"name":"password","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"1837938722211649573":{"error_kind":"string","string":"extend_from_slice out of bounds"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// Simple Token Contract implementation in Noir\n\nfn main(\n    // The version of the HyleOutput. This is unchecked for now.\n    version: pub u32,\n    // The initial state of the contract. This is the state before the transaction is executed.\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    // The state of the contract after the transaction is executed.\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    // The identity used to execute the transaction. This is the same as the one used in the\n    // BlobTransaction.\n    identity_len: pub u8,\n    identity: pub str<256>,\n    // TxHash of the BlobTransaction.\n    tx_hash: pub str<64>,\n    // ------ Blobs ------\n    // The index of the blob being executed.\n    index: pub u32,\n    // Number of blobs used by the contract\n    // If blob_number is > 1, then you need multiple occurence of parameters group \"Blob\"\n    blob_number: pub u32,\n    // --- Blob\n    // At least one blob_index must match the index parameter\n    blob_index: pub u32,\n    blob_contract_name_len: pub u8,\n    blob_contract_name: pub str<256>,\n    blob_capacity: pub u32,\n    blob_len: pub u32,\n    blob: pub [u8; 32],\n    // ---\n    // Number of blobs in the transaction. tx_blob_count >= blob_number\n    tx_blob_count: pub u32,\n    // -------------------\n    // Weither the execution was successful or not. If false, the BlobTransaction will be\n    // settled as failed.\n    success: pub bool,\n    // ------ Private inputs ------\n    password: [u8; 32],\n) {\n    let mut id: BoundedVec<u8, 256> = BoundedVec::from_parts(identity.as_bytes(), identity_len as u32);\n    id.extend_from_slice(\":\".as_bytes());\n    id.extend_from_slice(password);\n\n    println(f\"Identity: {identity}\");\n    println(f\"Password: {password}\");\n    println(f\"extended id: {id}\");\n\n    // Hash the combined input using SHA-256\n    let input_hash = sha256::sha256_var(id.storage(), identity_len as u64 + 1 + 32);\n    println(f\"Input Hash: {input_hash}\");\n\n    assert(input_hash == blob);\n\n    assert(success == true);\n    assert(version == 1);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n    assert(blob_capacity == 32);\n    assert(blob_len == 32);\n    assert(blob_number == 1);\n    assert(tx_blob_count >= 1);\n}","path":"/home/laurip/src/mini/zkhackproj/noir/src/main.nr"},"64":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\n","path":"/home/laurip/nargo/github.com/noir-lang/sha256/v0.1.0/src/sha256.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","build_msg_block","attach_len_to_msg_block","print_unconstrained","directive_integer_quotient","directive_invert","directive_to_radix"]}
\ No newline at end of file
+{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":4865417527115536477,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":256},"visibility":"public"},{"name":"tx_hash","type":{"kind":"string","length":64},"visibility":"public"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_contract_name_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"blob_contract_name","type":{"kind":"string","length":256},"visibility":"public"},{"name":"blob_capacity","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"tx_blob_count","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"},{"name":"password","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"1837938722211649573":{"error_kind":"string","string":"extend_from_slice out of bounds"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// Simple Token Contract implementation in Noir\n\nfn main(\n    // The version of the HyleOutput. This is unchecked for now.\n    version: pub u32,\n    // The initial state of the contract. This is the state before the transaction is executed.\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    // The state of the contract after the transaction is executed.\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    // The identity used to execute the transaction. This is the same as the one used in the\n    // BlobTransaction.\n    identity_len: pub u8,\n    identity: pub str<256>,\n    // TxHash of the BlobTransaction.\n    tx_hash: pub str<64>,\n    // ------ Blobs ------\n    // The index of the blob being executed.\n    index: pub u32,\n    // Number of blobs used by the contract\n    // If blob_number is > 1, then you need multiple occurence of parameters group \"Blob\"\n    blob_number: pub u32,\n    // --- Blob\n    // At least one blob_index must match the index parameter\n    blob_index: pub u32,\n    blob_contract_name_len: pub u8,\n    blob_contract_name: pub str<256>,\n    blob_capacity: pub u32,\n    blob_len: pub u32,\n    blob: pub [u8; 32],\n    // ---\n    // Number of blobs in the transaction. tx_blob_count >= blob_number\n    tx_blob_count: pub u32,\n    // -------------------\n    // Weither the execution was successful or not. If false, the BlobTransaction will be\n    // settled as failed.\n    success: pub bool,\n    // ------ Private inputs ------\n    password: [u8; 32],\n) {\n    let mut id: BoundedVec<u8, 256> = BoundedVec::from_parts(identity.as_bytes(), identity_len as u32);\n    id.extend_from_slice(\":\".as_bytes());\n    id.extend_from_slice(password);\n\n    println(f\"Identity: {identity}\");\n    println(f\"Password: {password}\");\n    println(f\"extended id: {id}\");\n\n\n    assert(success == true);\n    assert(version == 1);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n    assert(blob_capacity == 32);\n    assert(blob_len == 32);\n    assert(blob_number == 1);\n    assert(tx_blob_count >= 1);\n}","path":"/home/maximilien/zkhack/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","directive_integer_quotient","directive_invert"]}
\ No newline at end of file
diff --git a/noir/target/exemple-witness.gz b/noir/target/exemple-witness.gz
new file mode 100644
index 0000000000000000000000000000000000000000..05c58dbba8950978d4480453390eb0263b9419fe
GIT binary patch
literal 9698
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
JKRz29^&d50!6pCz

literal 0
HcmV?d00001

diff --git a/noir/target/proof b/noir/target/proof
index c1da9b438e16c0dd78d9de3464f081e6d03e5974..d6fd6a1c4ecc3e41765d4c3f27ef027eecc2e6fd 100644
GIT binary patch
literal 34180
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

literal 34180
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
U68bt~x6)3zVq~mmray-M3+>0J7XSbN

diff --git a/noir/target/vk b/noir/target/vk
index 7cace89d887a4110683d565181c0dfca14706717..ce23245478301fb098ba39b0992203929730d3d2 100644
GIT binary patch
delta 1467
zcmV;s1w{Ix4xtWz00000002M$000000000E000000007X00000000010000000000
z03&eK5C8yw{GKxsC;$L?xt=$L5C8yqxt<0WBme+;xj07QZU6uP03&eKZ~y>*{3CGH
zPyhgb{01rKjBU79<jfZ8f6g;RFTDPW%_NJms2Y9of&@%|U%L;R6V=C_tE<4^oBo%N
zd{d0rYQ}o)pMQs%X16r|ML7g^LJ&!Ieq+(K2&#|`z01cQ+{1wG@eMktqF~+M2(B0P
zb#wppB0?MVByXwM;kJTeDuRrj7q=K(2y+i`p4lSyU(4@k9Se$5k2DAi?@ka!Rdb~%
zS_!4yT+wQO(9?VY;1iEs1XNKyEGPP;C0U~~;d%C{VM?}};?TQ3Q$IBxZkYREJnv`I
zlmc$IXW<0LnxSgQo{4HS_qXOy_zycPj@wOV%l9!ay9i{hsIp{a@j!-$;3+Q>5D!Jr
zno=VOU$yuZ8CFRUaX_!5%OQU1YYi(evcBdt&RQ{Kd7jHu6OX0(jd`4k6%=5#<{J;R
zjxmtXs$3UqTg~|IAoLtL8gwuf-_xwRV+Mw5Hlg@>s-eYS22A222EX;#qA4O%FK}Bm
z=^6I^=6F1cK7Mwuc31mqo2M`DeS!I8?vG&5li>kCe-o(k{R645v+E@a;+{kWv`zMq
zFOKMC(j+!Y)P+`1QVSAdsl}`c@=R@2YP2F$zEXt%;lM|F=C-HCDFgL|eFJI`Mh=0K
z2trIQ?_dwEfW<S@nQkO+97s9x@_e<TSR+=)SXVJ-AwMfratSF0oNw#D6=H;#<^=@%
z9m@Spe`*zdF3kNC^=w65evkRXAJ*SF9o50v>D84FPmDVB?fnZ1d>~(pxAxx+Z!Izc
zG|4Co{q2uMWqn{$9MM-1>Ix@Spc7*JAyL8@_Ce;(X_K0tzWsW%Ez6m3e0Mrxi{2=S
zSi?vZ-nrUFGl%{lNaWrZbI((;fC2mfvE1qdf9q@tFW69tk@LbuW?=wP!BFHEOnaBx
zO&W>EgR5WI;z0!~i_@&&roL?!ZA(tB8QOV00`2+?q(azqHpKC-H(($Xr>dt0(9AA8
zo#+vDFg@kYAC0~arGv&G!L}k(VBh=$gLZ=o-p1urP{^J`*;T0Vk*wXW-#`TVtFtYa
zf3j(v6KZB6y+Uulrd=U1u}!CSH3mOO7r*emKKJeyBX}sH7TR_Il<^SL<z%$4Gc;bN
zp7r{vJ@;#D(CIL&@{{Li0=sv3E>l-vPFx83m8j$kEmIoJ{HO=rwU)kndK=0K4aanz
zT8WsWw7IiAM@|svRBsS0YpM`+beY$qe;#^L&lvTy<aLtTHitI@p*`?xKl5X{@b6bT
zSrN@ysU7%L0RWE&f!y~q2W7NQ2PuiX-T|xo#NbI9Td`|;9b5#nRwh8*vlNc;)xGyI
zy%ZlNAHwm&;(F8+iL8HKe`u738x_gYvjj>h66=*%`7p;8gsIcPGwb6=WN_cgf965N
zRIUgP9$}fIKV?@edQ8t?8}%M`jEO0NLfjtS97FS4{1O)D<y6JSe3c@HX2$ZBQF)EM
zfvaU(@>#dg*yO7*778k_4Hxcx%;JKZ7bJJuT1ti(JvnyJ>W6{x>0J`ydx9L!nzZx0
z!>J~jUZ9Gw*o_=zddb>aM7X2gf491UULJK43o*ERvtjW7TGe+Z9XzH23gY~&S_{BI
zDmN~i@FW5Y9~APsqQO~qk*3q2z@DR0;2w|~!SkxN>P)M3kHpm!pWyJGQP7N~;5^;5
zYcHaagVh8fpaFNZNz+_9=Tu(?`nVrNVb6D=5J)|d^GW**Ig1`w?`NcY2N?u3kP?(e
zv!Mk*0YDKc_HDh^S8W)U6pdL?|APbNsI4!7*H$*t-s$yb&$I{lJR}9gi*{&7KR(bX
Vad;K%x>^l14uWaKx5C>@?DRz}uVDZH

delta 1467
zcmV;s1w{Ix4xtWz00000001BW000000000D000000007X000000000100u#PZ~y>!
z8aPJbZU6uP00u@EBme+-8U{d3JOBUy00000000000LCR$kN^OG{042(C;$L>8U}zh
z5C8yp8Z5zewV6;nQ_QMLY8iX-`#y+*cyc;S-iN;Rga%Q6a~Kr>>vnO9Q&--2-#C#?
z&AX3_-I()51*4BSWlCE)L?s!}$txj08!v+4{|j2#vZguzz>cW;uIl;~&0j3rCsqW5
zLa)}nHrnC8_K<F4>zm;mNqpOVSeJ4JEK2ZGxFs0(imnGvt?>pu0l6;h@M#5oK2g2r
z1H6-ta$`z=*Hg^`(hh%3E)=Pl6~p(BOp#&l0^yBLfh;bNg=bMvzcr*1OS|!4%_d-r
zQ_Wx%?}5hk3`*GNN`pp+#$;n`?P1Ce;c1}qc49cws+=#w!X<h+FAt(<AGLLJ%%X%@
zq(5;Ig!6Z{=BD3UD)IZDPzJkAiq!Q7s}c~4qpx#hK%oVN6$b^njYX~Xa3@bX{1n>h
zVY*!HhT*4gMvRqsN0dS>4HAnCHDbca!e9@_c=R(;IY-ULYw|Nd$;XsC^|-BJAK+|S
z7lKK*x{>v)Y}oRkgK+d=G>s}7aO7H-5L@pGli>kCe=G~4MPa7US08Q2)6$hKzEqo!
zDel&h9%0u>#J5iLxGA*2g1*_B20ENlHn}?1fAjkkmA{`GeE7eQNu&GarVQk=&C|8}
zGT>up$Tjf%@*s1^q)Eo8n?}hau(2_ob}esFtA~&Fy``h|%mH2YAwckN%RL7o3oPrk
z>HR<Xe_|kl&P=e7#dGzpCT_zB*tuyiMf<5(dd2lwowhMHEBO^N<;{*|LUx5Xg1W|c
z-}6}_`D1d%Ek6-9{1IhJc*Ppj$c4o*r~LQl2Dg};6iZCjNBnTOBtPp5TP+dKY1Ro`
z(#Coim9HGpu?0$Z)#&c}*utZ6N>tH?0Qj%AfA!=LusAMGBeh(Id`kHqkVFZiVD@;*
zh4(MjI?OlD0QJKTYx0en217aOBBPb$7s$C*TVBF`?VWQ~mZsOzKPAN(#*D8@;j@me
zX%s7DYrcb5*;!39Y3`{zTtNr&W&Lv<IO)7zYg1K@wfcR5@-AeS8bvYO|D?iV`44)m
ze{wt39?&G}10ajB?l(%d9W1fB{wA{4d8EHn%CS#FNu!#*CT4>vB$mibmLLzR3X(Uo
z+wbAA8mo?{48`h^X$F@!A&RMZJw}jIHl|<r-xOMy20rMppJp>x_CE}}eQmC03Ef_1
z9|bLZHZOi(N5tc1kwMfT;{}19uCeofe`h#P7%7$SPp0XHILD6j#;Y!0w`6D)du@8J
z7`3#t8w_ZH1q?gL>Pb@taQi4L$iH1<m<;lfyo8|dz?v6ypo*&Jye5B_+?l<1)Z0md
z`uO_Z4_<!n{xdb{h+#yv$_oyVX%@NA@O-^n6&v!lm+h7J43Ixedco#F8-zipf0q)V
zGwueAr0mYO#(_C>0jHSy7}#^|;1Z!{*D<WGNf~$MBwY#u5&x)?<A>aASKPBcRe>Ge
z`;a0l=qN}5zg1_qGo=D@FU}i}OYl$sZtY;i>1(8(dzEBa6?Zj^&4$`|+`uTzc($I8
zW85jAI&p<j9q?02whZD2tQ%Nrf4)tQ<kEN*5m-v=QL2#ou8JyqN_V%EAa#Nm!v#=B
z^pB;76HeI;r^+T}+?P>6Yw+)~&2&Z--2uAzWS0KzZ!VXOGIAOe=i8JJj72s9-m3Se
zY>cjRN`$52ri0E-sNU703X_2tX|gI94X0VQuxb~a!S8rmZpDSCO<GYw2b=NL@pr#w
zv!Mk*0YDZWIY{`aufV~RGQl=f&2kfqy#6h4&f6W(0p7A4uJRw~l16gRT$`NF_$Fnp
VYy&zJUDSqIfLTuQAfue@CD!bpzfS-F

diff --git a/zkhack-portal/bun.lockb b/zkhack-portal/bun.lockb
new file mode 100755
index 0000000000000000000000000000000000000000..521e7a92a354d01e0d07e94fb23ba82c01816d23
GIT binary patch
literal 162414
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

literal 0
HcmV?d00001

diff --git a/zkhack-portal/public/circuit.json b/zkhack-portal/public/circuit.json
index 2c8c25f..56a7a90 100644
--- a/zkhack-portal/public/circuit.json
+++ b/zkhack-portal/public/circuit.json
@@ -1 +1 @@
-{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":13006106641385494867,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":256},"visibility":"public"},{"name":"tx_hash","type":{"kind":"string","length":64},"visibility":"public"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_contract_name_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"blob_contract_name","type":{"kind":"string","length":256},"visibility":"public"},{"name":"blob_capacity","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"tx_blob_count","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"},{"name":"password","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"1837938722211649573":{"error_kind":"string","string":"extend_from_slice out of bounds"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// Simple Token Contract implementation in Noir\n\nfn main(\n    // The version of the HyleOutput. This is unchecked for now.\n    version: pub u32,\n    // The initial state of the contract. This is the state before the transaction is executed.\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    // The state of the contract after the transaction is executed.\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    // The identity used to execute the transaction. This is the same as the one used in the\n    // BlobTransaction.\n    identity_len: pub u8,\n    identity: pub str<256>,\n    // TxHash of the BlobTransaction.\n    tx_hash: pub str<64>,\n    // ------ Blobs ------\n    // The index of the blob being executed.\n    index: pub u32,\n    // Number of blobs used by the contract\n    // If blob_number is > 1, then you need multiple occurence of parameters group \"Blob\"\n    blob_number: pub u32,\n    // --- Blob\n    // At least one blob_index must match the index parameter\n    blob_index: pub u32,\n    blob_contract_name_len: pub u8,\n    blob_contract_name: pub str<256>,\n    blob_capacity: pub u32,\n    blob_len: pub u32,\n    blob: pub [u8; 32],\n    // ---\n    // Number of blobs in the transaction. tx_blob_count >= blob_number\n    tx_blob_count: pub u32,\n    // -------------------\n    // Weither the execution was successful or not. If false, the BlobTransaction will be\n    // settled as failed.\n    success: pub bool,\n    // ------ Private inputs ------\n    password: [u8; 32],\n) {\n    let mut id: BoundedVec<u8, 256> = BoundedVec::from_parts(identity.as_bytes(), identity_len as u32);\n    id.extend_from_slice(\":\".as_bytes());\n    id.extend_from_slice(password);\n\n    println(f\"Identity: {identity}\");\n    println(f\"Password: {password}\");\n    println(f\"extended id: {id}\");\n\n    // Hash the combined input using SHA-256\n    let input_hash = sha256::sha256_var(id.storage(), identity_len as u64 + 1 + 32);\n    println(f\"Input Hash: {input_hash}\");\n\n    assert(input_hash == blob);\n\n    assert(success == true);\n    assert(version == 1);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n    assert(blob_capacity == 32);\n    assert(blob_len == 32);\n    assert(blob_number == 1);\n    assert(tx_blob_count >= 1);\n}","path":"/home/laurip/src/mini/zkhackproj/noir/src/main.nr"},"64":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\n","path":"/home/laurip/nargo/github.com/noir-lang/sha256/v0.1.0/src/sha256.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","build_msg_block","attach_len_to_msg_block","print_unconstrained","directive_integer_quotient","directive_invert","directive_to_radix"]}
\ No newline at end of file
+{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":4865417527115536477,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":256},"visibility":"public"},{"name":"tx_hash","type":{"kind":"string","length":64},"visibility":"public"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_contract_name_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"blob_contract_name","type":{"kind":"string","length":256},"visibility":"public"},{"name":"blob_capacity","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"blob","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"tx_blob_count","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"success","type":{"kind":"boolean"},"visibility":"public"},{"name":"password","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"1837938722211649573":{"error_kind":"string","string":"extend_from_slice out of bounds"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// Simple Token Contract implementation in Noir\n\nfn main(\n    // The version of the HyleOutput. This is unchecked for now.\n    version: pub u32,\n    // The initial state of the contract. This is the state before the transaction is executed.\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    // The state of the contract after the transaction is executed.\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    // The identity used to execute the transaction. This is the same as the one used in the\n    // BlobTransaction.\n    identity_len: pub u8,\n    identity: pub str<256>,\n    // TxHash of the BlobTransaction.\n    tx_hash: pub str<64>,\n    // ------ Blobs ------\n    // The index of the blob being executed.\n    index: pub u32,\n    // Number of blobs used by the contract\n    // If blob_number is > 1, then you need multiple occurence of parameters group \"Blob\"\n    blob_number: pub u32,\n    // --- Blob\n    // At least one blob_index must match the index parameter\n    blob_index: pub u32,\n    blob_contract_name_len: pub u8,\n    blob_contract_name: pub str<256>,\n    blob_capacity: pub u32,\n    blob_len: pub u32,\n    blob: pub [u8; 32],\n    // ---\n    // Number of blobs in the transaction. tx_blob_count >= blob_number\n    tx_blob_count: pub u32,\n    // -------------------\n    // Weither the execution was successful or not. If false, the BlobTransaction will be\n    // settled as failed.\n    success: pub bool,\n    // ------ Private inputs ------\n    password: [u8; 32],\n) {\n    let mut id: BoundedVec<u8, 256> = BoundedVec::from_parts(identity.as_bytes(), identity_len as u32);\n    id.extend_from_slice(\":\".as_bytes());\n    id.extend_from_slice(password);\n\n    println(f\"Identity: {identity}\");\n    println(f\"Password: {password}\");\n    println(f\"extended id: {id}\");\n\n\n    assert(success == true);\n    assert(version == 1);\n    assert(initial_state_len == 4);\n    assert(next_state_len == 4);\n    assert(initial_state == [0; 4]);\n    assert(next_state == [0; 4]);\n    assert(blob_capacity == 32);\n    assert(blob_len == 32);\n    assert(blob_number == 1);\n    assert(tx_blob_count >= 1);\n}","path":"/home/maximilien/zkhack/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","directive_integer_quotient","directive_invert"]}
\ No newline at end of file
diff --git a/zkhack-portal/src/lib/hyli/hyli.ts b/zkhack-portal/src/lib/hyli/hyli.ts
index a5b03a5..c4ecd4c 100644
--- a/zkhack-portal/src/lib/hyli/hyli.ts
+++ b/zkhack-portal/src/lib/hyli/hyli.ts
@@ -101,15 +101,10 @@ const build_proof_transaction = async (
   //const { witness } = await noir.execute({ x, y });
 
   const hashed_password_bytes = await sha256(stringToBytes(PASSWORD));
-  let encoder = new TextEncoder();
-  let id_prefix = encoder.encode(`${IDENTITY}:`);
-  let extended_id = new Uint8Array([...id_prefix, ...hashed_password_bytes]);
-  const stored_hash = await sha256(extended_id);
 
   const data = generateProverData(
     IDENTITY,
     hashed_password_bytes,
-    stored_hash,
     tx_hash,
     blob_index,
     tx_blob_count
@@ -143,7 +138,6 @@ const build_proof_transaction = async (
 const generateProverData = (
   id: string,
   pwd: Uint8Array,
-  stored_hash: Uint8Array,
   tx: string,
   blob_index: number,
   tx_blob_count: number
@@ -163,7 +157,7 @@ const generateProverData = (
   const blob_contract_name = CONTRACT_NAME.padEnd(256, "0");
   const blob_capacity = 32;
   const blob_len = 32;
-  const blob: number[] = Array.from(stored_hash);
+  const blob: number[] = Array.from(pwd);
   const success = 1;
   const password: number[] = Array.from(pwd);
   assert(password.length == 32, "Password length is not 32 bytes");
-- 
2.49.0

